#!/bin/bash

#Yaes

usage="prm [option] [args]"

if [ "$#" -lt 1 ]; then
	printf "%s\n" "Incorrect Usage."
	printf "%s\n" "$usage"
	printf "%s\n" "Type 'prm h' to learn more"
else
	if [ "$1" = "h" ]; then
		#Nothing specified with help
		if [ "$#" -eq 1 ]; then
			printf "%s\n" "prm is a script to wrap together installation, compiling, and execution of different programs." "This is the Help Menu." "Usage: prm h [--c] [--h] [--i] [--r] [--s] [--t] [--init]"
		fi
		#Argument with h command
		if [ "$#" -ge 2 ]; then
			for arg in "$@"; do
				case $arg in
					prm)
						shift;;
					h)
						shift;;
					--h) 
						printf "%s\n" "'prm h' will display the help menu."
						shift;;
					--i) 
						printf "%s\n" "'prm i' installs different languages." "Usage: prm i [lang]"
						shift;;
					--c)
						printf "%s\n" "'prm c' compiles files." "Usage: prm c [lang] [name] [source] [name] [source] [name] [source] ... "
						shift;;
					--r)
						printf "%s\n" "'prm r' runs programs." "Usage: prm r [lang] [(based on lang) version] [filename]"
						shift;;
					--s)
						printf "%s\n" "'prm s' views all saved compilers, interpreters, and packages."
						shift;;
					--t)
						printf "%s\n" "'prm t' transpiles from one language to another language."
						shift;;
					--l)
						printf "%s\n" "'prm l' lists all possible languages for running and compiling."
						shift;;
					--init)
						printf "%s\n" "Initializes language management of prm by moving all external languages into a special folder and exporting that path."
						shift;;
					*) 
						printf "%s\n" "That argument does not exist."
						shift;;
				esac
			done
		fi
	elif [ "$1" = "init" ]; then
		#Initialize the script
		#Adding Homebrew
		/usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
		. ~/.bashrc
		. ~/.bash_profile
		tset
		reset	
	elif [ "$1" = "i" ]; then
		#Install
		if [ "$#" -eq 2 ]; then
			if [ "$2" == "haskell" -o "$2" == "Haskell" ]; then
				#Haskell
				curl --proto '=https' --tlsv1.2 -sSf https://get-ghcup.haskell.org | sh
				. ~/.bashrc
				. ~/.bash_profile
				tset
				reset
			elif [ "$2" == "c" -o "$2" == "C" -o "$2" == "C++" -o "$2" == "c++" ]; then
				xcode-select --install
			elif [ "$2" == "perl" -o "$2" == "Perl" ]; then
				#Perl
				curl -L http://xrl.us/installperlosx | bash
				. ~/.bashrc
				. ~/.bash_profile
				tset
				reset
			elif [ "$2" == "lisp" -o "$2" == "Lisp" ]; then
				#Lisp
				brew install sbcl || printf "%s\n" "Homebrew must be installed to install lisp. " "Perform 'prm init' to install Homebrew. "
			elif [ "$2" == "javascript" -o "$2" == "Javascript" ]; then
				#Javascript
				brew install node || printf "%s\n" "Homebrew must be installed to install javascript. " "Perform 'prm init' to install Homebrew. "
			fi
		fi
	elif [ "$1" = "c" ]; then
		#Compiling
		if [ "$#" -ge 3 ]; then
			#COMPILING FOR LANGUAGES
			if [ "$2" == 'C' -o "$2" == 'c' ]; then
				#C lang
				if [ $((($#) % 2)) -eq 0 ]; then
					for args in $(seq 3 2 $#); do
						aone=$(($args+1))
						text="gcc -o "${!args}" "${!aone}
						$text
					done
				else
					printf "%s\n" "A name and source file is necessary for each compile. "
				fi
			elif [ "$2" == 'C++' -o "$2" == 'c++' ]; then
				if [ $((($#) % 2)) -eq 0 ]; then
					for args in $(seq 3 2 $#); do
						aone=$(($args+1))
						text="g++ -o "${!args}" "${!aone}
						$text
					done
				else
					printf "%s\n" "A name and source file is necessary for each compile. "
				fi
			elif [ "$2" == 'Haskell' -o "$2" == 'haskell' ]; then
				if [ $((($#) % 2)) -eq 0 ]; then
					for args in $(seq 3 2 $#); do
						aone=$(($args+1))
						text="ghc -o "${!args}" "${!aone}
						$text
					done
				else
					printf "%s\n" "A name and source file is necessary for each compile. "
				fi
			elif [ "$2" == "Applescript" -o "$2" == "applescript" -o "$2" == "AppleScript" -o "$2" == "appleScript" ]; then
				#Compiling an applescript into an app
				if [ $((($#) % 2)) -eq 0 ]; then
					for args in $(seq 3 2 $#); do
						aone=$(($args+1))
						text="osacompile -o "${!args}" "${!aone}
						$text
					done
				else
					printf "%s\n" "A name and source file is necessary for each compile. "
			fi
		else
			printf "%s\n" "Usage: prm c [lang] [name] [source] [name] [source ...]"
			exit
		fi
	elif [ "$1" = "r" ]; then
		#Running
		if [ "$#" -ge 3 ]; then
			#RUNNING FOR LANGUAGES
			if [ "$#" -gt 3 ]; then
				if [ "$2" == 'python' ]; then
					text="python$3 $4"
					for args in $(seq 4 $#); do
						text=$text" "$args
					done
					$text
				fi
			else
				if [ "$2" == 'x' ]; then
					if [ -e $3 ]; then
						text="./"$3
						for args in $(seq 3 $#); do
							text=$text" "$args
						done
						$text
					else
						printf "%s\n" "That file does not exist. "
					fi
				elif [ "$2" == 'ruby' ]; then
					if [ -e $3 ]; then
						text="ruby "$3
						for args in $(seq 3 $#); do
							text=$text" "$args
						done
						$text
					else
						printf "%s\n" "That file does not exist. "
					fi
				elif [ "$2" == 'javascript' ]; then
					if [ -e $3 ]; then
						text="node "$3
						for args in $(seq 3 $#); do
							text=$text" "$args
						done
						$text
					else
						printf "%s\n" "That file does not exist. "
					fi
				elif [ "$2" == 'lisp' ]; then
					if [ -e $3 ]; then
						text="sbcl --option "$3
						for args in $(seq 3 $#); do
							text=$text" "$args
						done
						$text
					else
						printf "%s\n" "That file does not exist. "
					fi
<<<<<<< HEAD
				elif [ "$2" == "perl" ]; then
					if [ -e $3 ]; then
=======
				elif [ "$2" == 'perl' ]; then
					if [ -e $3 ]; then
						#Might want to add the -w flag, it will give warnings if syntax is wonky
>>>>>>> 11eba0e596c1ee2cac57250adb24f5e01070d064
						text="perl "$3
						for args in $(seq 3 $#); do
							text=$text" "$args
						done
						$text
					else
						printf "%s\n" "That file does not exist. "
<<<<<<< HEAD
					fi
				elif [ "$2" == "applescript" -o "$2" == "Applescript" -o "$2" == "appleScript" -o "$2" == "AppleScript" ]; then
					if [ -e $3 ]; then
						text="osascript "$3
						for args in $(seq 3 $#); do
							text=$text" "$args
						done
						$text
					else
						printf "%s\n" "That file does not exist. "
					fi
=======
>>>>>>> 11eba0e596c1ee2cac57250adb24f5e01070d064
				fi
			fi
		else
			printf "%s\n" "Usage: prm r [lang] [(based on lang) version] [filename] [args]"
		fi
	fi
fi
